<#@ template language="C#" hostspecific="true" Debug="false" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Configuration" #>
<#@ Assembly Name="System.Web" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Configuration" #>
<#+

    // CONFIGURE YOUR DATABASE SETTINGS HERE

    const string ServerName                   = @".\sqlexpress";
    const string DatabaseName                 = @"";

    // If you want to use sql authentication fill out these two variables...
    const string SqlAuth_Username             = @"";
    const string SqlAuth_Password             = @"";

    // ...or if you want to use sql authentication fill out this variable
    const string Config_ConnectionName        = @"";

	
    // CONFIGURE CODE GENERATION HERE

	    // Regex filter for the tables that are excluded from code generation.
    // E.g.: "Applications|aspnet_" excludes the tables one gets with aspnet authentication.
    const string ExcludeTablesRegex = "Applications|aspnet_";

    // Set to true for having the schema in the namespace affect the namespace.
    // The namespace will for instance be "MyDatalayer.dbo".
    // With value set to false the schema will be unused.
    // The namespace will then be "MyDatalayer".
    const bool UseSchemaForNamespace = false;


	//	DTO settings
	
	//	Sets the namespace for the DTO classes.
    const string DTONameSpaceName = @"DataLayer.DTO";

    /// <summary>Path for where the DTO classes are written.  The path is relative to the
    /// MooD4L.tt file.
    /// E.g.: "DTO" creates all DTO classes in the subfolder DTO.
    /// "" creates al DTO classes in the same folder as the MooD4L.tt file.
    /// </summary>
    const string 	DTOOutputPath = "DTO";
	
    //	Set to true for making the DTOs partial classes.
    const bool DTOUsePartialClass = true;

    // Static constructor name for the DTOs.
    // Leave blank if no static constructor should be created.
    const string DTONameOfStaticConstructor = "Create";

    // Set whether the class should inherit or implement an interface or two.
    // Leave blank no inheritance or interface implementing is to be created.
    // E.g.: ClassInheritFrom = "MyBaseClass, IMyInterface".
    const string DTOClassInheritFrom = "";

    // The format for the DTO file name.
    // Leave blank if the file name should be the same as the table's.  But don't
	// since we want a trailing .cs for the compiler to work.
    // Use {0} for inserting the table's name; string.Format is used by MooDAL.
    // E.g. for a table called Customer:
    // ".cs" => "Customer.cs"
    // "Record.cs" => "CustomerRecord.cs"
    // "The{0}Class.MooD4L.cs" => "TheCustomerClass.MooD4Lcs"
    const string DTOFileNameFormat = "{0}.MooD4L.cs";

	
	//	Surface settings

	//	Sets the namespace for the surface classes.
    const string SurfaceNameSpaceName = @"DataLayer.Surface";


    // The format for the surface class name.
    // Leave blank if the class name should be the same as the table's.
    // Use {0} for inserting the table's name; string.Format is used by MooD4L.
    // E.g. for a table called Customer:
    // "" => "Customer"
    // "Surf" => "CustomerSurf"
    // "The{0}Class" => "TheCustomerClass"
    const string SurfaceClassNameFormat = "";

    // The format for the surface file name.
    // Leave blank if the file name should be the same as the table's.  But don't
    // since we want a trailing .cs for the compiler to work.
    // Use {0} for inserting the table's name; string.Format is used by MooDAL.
    // E.g. for a table called Customer:
    // ".cs" => "Customer.cs"
    // "Surf.cs" => "CustomerSurf.cs"
    // "The{0}Class.cs" => "TheCustomerClass.cs"
    const string SurfaceFileNameFormat = "{0}Surface.MooD4L.cs";

    /// <summary>Path for where the Surface classes are written.  The path is relative to the
    /// MooD4L.tt file.
    /// E.g.: "Surface" creates all Surface classes in the subfolder Surface.
    /// "" creates al Surface classes in the same folder as the MooD4L.tt file.
    /// </summary>
    const string SurfaceOutputPath = "Surface";
	
    // Set whether the surface class should inherit or implement an interface or two.
    // Leave blank no inheritance or interface implementing is to be created.
    // E.g.: ClassInheritFrom = "SurfaceBase, ISurface".
    const string SurfaceClassInheritFrom = "SurfaceBase, ISurface";
	


    // DON'T CHANGE ANYTHING BELOW HERE UNLESS
    // YOU HAVE MORE THAN 1000 FOLLOWERS ON TWITTER

    string SqlAuthConnectionString = "Data Source={0};Initial Catalog={1};User Id={2};Password={3};";
    string TrustedConnectionString = "Data Source={0};Initial Catalog={1};Integrated Security=SSPI;";

    bool ConfigIsValid()
    {
        return !string.IsNullOrWhiteSpace( DTONameSpaceName )
                    && !string.IsNullOrWhiteSpace( ServerName )
                    && !string.IsNullOrWhiteSpace( DatabaseName );
    }

    string GetConnectionString()
    {
      string conn = String.Format( TrustedConnectionString, ServerName, DatabaseName );
        if( false == String.IsNullOrWhiteSpace( SqlAuth_Username ) )
            conn = String.Format( SqlAuthConnectionString, ServerName, DatabaseName, SqlAuth_Username, SqlAuth_Password );
        else if (!String.IsNullOrWhiteSpace(Config_ConnectionName))
        {
            var configFile = new ExeConfigurationFileMap { ExeConfigFilename = GetRootProjectDirectory() };
            var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
            conn = config.ConnectionStrings.ConnectionStrings[Config_ConnectionName].ConnectionString;
        }

        return conn;
    }

    int recurseCount = 0;
    string GetRootProjectDirectory(string root = null)
    {
      ++recurseCount;
        if (root == null)
        {
          recurseCount = 0;
            root = Host.TemplateFile;
        }
      string templateDirectory = Path.GetDirectoryName(root);
        var files = Directory.GetFiles(templateDirectory, "app.config", SearchOption.TopDirectoryOnly) ??
                  Directory.GetFiles(templateDirectory, "web.config", SearchOption.TopDirectoryOnly);

        if (files == null)
        {
          if (recurseCount < 100)
            {
             templateDirectory = GetRootProjectDirectory(Directory.GetParent(templateDirectory).FullName);
            }
        }
        return Path.Combine(templateDirectory, files[0]);
    }
#>
